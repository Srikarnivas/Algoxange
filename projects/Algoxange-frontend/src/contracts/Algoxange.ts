/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Algoxange","structs":{},"methods":[{"name":"create_nft","args":[{"type":"string","name":"asset_name"},{"type":"string","name":"unit_name"},{"type":"string","name":"url"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"create_application","args":[{"type":"asset","name":"asset_id"},{"type":"uint64","name":"unitary_price"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"update_asset_id","args":[{"type":"asset","name":"asset_id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"set_price","args":[{"type":"uint64","name":"unitary_price"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"opt_in_to_asset","args":[{"type":"pay","name":"mbrpay"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"debug_buy_check","args":[{"type":"pay","name":"buyerTxn"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"buy","args":[{"type":"pay","name":"buyerTxn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete_application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetid":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRpZA=="},"unitaryprice":{"keyType":"AVMString","valueType":"AVMUint64","key":"dW5pdGFyeXByaWNl"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[110],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[122,144,171,193,209,227,250],"errorMessage":"OnCompletion is not NoOp"},{"pc":[231],"errorMessage":"can only call when creating"},{"pc":[113,125,147,174,196,212,253],"errorMessage":"can only call when not creating"},{"pc":[380,410,505,533],"errorMessage":"check self.assetid exists"},{"pc":[463,498],"errorMessage":"check self.unitaryprice exists"},{"pc":[135,157,184],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAQAEAyYDB2Fzc2V0aWQMdW5pdGFyeXByaWNlBBUffHUxG0EAP4IIBL22MzYEh4y7PQQMLr6VBMx2ADcEFXRTWgSta98MBJWNPfkEM7NJnjYaAI4IAJAAeQBnAFcAQQAmABAAAiNDMRmBBRJEMRhEiAGWIkMxGRREMRhEMRYiCUk4ECISRIgBTSJDMRkURDEYRDEWIglJOBAiEkSIAQsWKkxQsCJDMRkURDEYRDEWIglJOBAiEkSIALIiQzEZFEQxGEQ2GgEXiACUIkMxGRREMRhENhoBF8AwiAB0IkMxGRREMRgURDYaARfAMDYaAheIAFEiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIAAcWKkxQsCJDigMBsTIKRwOyLLIrsiqyKYv/sieL/bImi/6yJSOyIyKyIiWyECOyAbO0PImKAgAoi/5nKYv/Z4mKAQAxADIJEkQoi/9niYoBADEAMgkSRCmL/2eJigEAMQAyCRJEMgojKGVEcABFARREi/84BzIKEkSL/zgIMgEyEAgSRLEjKGVEMgojshKyFLIRJLIQI7IBs4mKAQGL/zgAMQATQQACIomL/zgHMgoTQQADgQKJi/84CCMpZUQTQQACJYkjiYoBAIv/OAAxABJEi/84BzIKEkSL/zgIIyllRBJEsSMoZUQxACKyErIUshEkshAjsgGziTEAMgkSRLEjKGVEMglJshUjshKyFLIRJLIQgegHsgGzsTIJSbIJI7IIsgcishCB6AeyAbOJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Algoxange contract
 */
export type AlgoxangeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_nft(string,string,string)uint64': {
      assetName: string
      unitName: string
      url: string
    }
    'create_application(asset,uint64)void': {
      assetId: bigint
      unitaryPrice: bigint | number
    }
    'update_asset_id(asset)void': {
      assetId: bigint
    }
    'set_price(uint64)void': {
      unitaryPrice: bigint | number
    }
    'opt_in_to_asset(pay)void': {
      mbrpay: AppMethodCallTransactionArgument
    }
    'debug_buy_check(pay)uint64': {
      buyerTxn: AppMethodCallTransactionArgument
    }
    'buy(pay)void': {
      buyerTxn: AppMethodCallTransactionArgument
    }
    'delete_application()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_nft(string,string,string)uint64': [assetName: string, unitName: string, url: string]
    'create_application(asset,uint64)void': [assetId: bigint, unitaryPrice: bigint | number]
    'update_asset_id(asset)void': [assetId: bigint]
    'set_price(uint64)void': [unitaryPrice: bigint | number]
    'opt_in_to_asset(pay)void': [mbrpay: AppMethodCallTransactionArgument]
    'debug_buy_check(pay)uint64': [buyerTxn: AppMethodCallTransactionArgument]
    'buy(pay)void': [buyerTxn: AppMethodCallTransactionArgument]
    'delete_application()void': []
  }
}

/**
 * The return type for each method
 */
export type AlgoxangeReturns = {
  'create_nft(string,string,string)uint64': bigint
  'create_application(asset,uint64)void': void
  'update_asset_id(asset)void': void
  'set_price(uint64)void': void
  'opt_in_to_asset(pay)void': void
  'debug_buy_check(pay)uint64': bigint
  'buy(pay)void': void
  'delete_application()void': void
}

/**
 * Defines the types of available calls and state of the Algoxange smart contract.
 */
export type AlgoxangeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_nft(string,string,string)uint64' | 'create_nft', {
      argsObj: AlgoxangeArgs['obj']['create_nft(string,string,string)uint64']
      argsTuple: AlgoxangeArgs['tuple']['create_nft(string,string,string)uint64']
      returns: AlgoxangeReturns['create_nft(string,string,string)uint64']
    }>
    & Record<'create_application(asset,uint64)void' | 'create_application', {
      argsObj: AlgoxangeArgs['obj']['create_application(asset,uint64)void']
      argsTuple: AlgoxangeArgs['tuple']['create_application(asset,uint64)void']
      returns: AlgoxangeReturns['create_application(asset,uint64)void']
    }>
    & Record<'update_asset_id(asset)void' | 'update_asset_id', {
      argsObj: AlgoxangeArgs['obj']['update_asset_id(asset)void']
      argsTuple: AlgoxangeArgs['tuple']['update_asset_id(asset)void']
      returns: AlgoxangeReturns['update_asset_id(asset)void']
    }>
    & Record<'set_price(uint64)void' | 'set_price', {
      argsObj: AlgoxangeArgs['obj']['set_price(uint64)void']
      argsTuple: AlgoxangeArgs['tuple']['set_price(uint64)void']
      returns: AlgoxangeReturns['set_price(uint64)void']
    }>
    & Record<'opt_in_to_asset(pay)void' | 'opt_in_to_asset', {
      argsObj: AlgoxangeArgs['obj']['opt_in_to_asset(pay)void']
      argsTuple: AlgoxangeArgs['tuple']['opt_in_to_asset(pay)void']
      returns: AlgoxangeReturns['opt_in_to_asset(pay)void']
    }>
    & Record<'debug_buy_check(pay)uint64' | 'debug_buy_check', {
      argsObj: AlgoxangeArgs['obj']['debug_buy_check(pay)uint64']
      argsTuple: AlgoxangeArgs['tuple']['debug_buy_check(pay)uint64']
      returns: AlgoxangeReturns['debug_buy_check(pay)uint64']
    }>
    & Record<'buy(pay)void' | 'buy', {
      argsObj: AlgoxangeArgs['obj']['buy(pay)void']
      argsTuple: AlgoxangeArgs['tuple']['buy(pay)void']
      returns: AlgoxangeReturns['buy(pay)void']
    }>
    & Record<'delete_application()void' | 'delete_application', {
      argsObj: AlgoxangeArgs['obj']['delete_application()void']
      argsTuple: AlgoxangeArgs['tuple']['delete_application()void']
      returns: AlgoxangeReturns['delete_application()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetid: bigint
        unitaryprice: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgoxangeSignatures = keyof AlgoxangeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgoxangeNonVoidMethodSignatures = keyof AlgoxangeTypes['methods'] extends infer T ? T extends keyof AlgoxangeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Algoxange smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgoxangeSignatures> = AlgoxangeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Algoxange smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoxangeSignatures> = AlgoxangeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AlgoxangeTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgoxangeCreateCallParams =
  | Expand<CallParams<AlgoxangeArgs['obj']['create_application(asset,uint64)void'] | AlgoxangeArgs['tuple']['create_application(asset,uint64)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AlgoxangeArgs['obj']['create_application(asset,uint64)void'] | AlgoxangeArgs['tuple']['create_application(asset,uint64)void']> & {method: 'create_application(asset,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type AlgoxangeDeleteCallParams =
  | Expand<CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']> & {method: 'delete_application'}>
  | Expand<CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']> & {method: 'delete_application()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoxangeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgoxangeCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: AlgoxangeDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Algoxange smart contract
 */
export abstract class AlgoxangeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AlgoxangeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(asset,uint64)void':
            return AlgoxangeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Algoxange smart contract using the create_application(asset,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AlgoxangeArgs['obj']['create_application(asset,uint64)void'] | AlgoxangeArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(asset,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.unitaryPrice],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends AlgoxangeDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_application':
          case 'delete_application()void':
            return AlgoxangeParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Algoxange smart contract using the delete_application()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_application()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the create_nft(string,string,string)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNft(params: CallParams<AlgoxangeArgs['obj']['create_nft(string,string,string)uint64'] | AlgoxangeArgs['tuple']['create_nft(string,string,string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_nft(string,string,string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetName, params.args.unitName, params.args.url],
    }
  }
  /**
   * Constructs a no op call for the update_asset_id(asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAssetId(params: CallParams<AlgoxangeArgs['obj']['update_asset_id(asset)void'] | AlgoxangeArgs['tuple']['update_asset_id(asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'update_asset_id(asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId],
    }
  }
  /**
   * Constructs a no op call for the set_price(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setPrice(params: CallParams<AlgoxangeArgs['obj']['set_price(uint64)void'] | AlgoxangeArgs['tuple']['set_price(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'set_price(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.unitaryPrice],
    }
  }
  /**
   * Constructs a no op call for the opt_in_to_asset(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<AlgoxangeArgs['obj']['opt_in_to_asset(pay)void'] | AlgoxangeArgs['tuple']['opt_in_to_asset(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_in_to_asset(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.mbrpay],
    }
  }
  /**
   * Constructs a no op call for the debug_buy_check(pay)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static debugBuyCheck(params: CallParams<AlgoxangeArgs['obj']['debug_buy_check(pay)uint64'] | AlgoxangeArgs['tuple']['debug_buy_check(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'debug_buy_check(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyerTxn],
    }
  }
  /**
   * Constructs a no op call for the buy(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buy(params: CallParams<AlgoxangeArgs['obj']['buy(pay)void'] | AlgoxangeArgs['tuple']['buy(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.buyerTxn],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Algoxange smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgoxangeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AlgoxangeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AlgoxangeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AlgoxangeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Algoxange smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgoxangeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AlgoxangeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AlgoxangeCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? AlgoxangeParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (AlgoxangeDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AlgoxangeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algoxange smart contract using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AlgoxangeArgs['obj']['create_application(asset,uint64)void'] | AlgoxangeArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AlgoxangeParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Algoxange smart contract using the delete_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(AlgoxangeParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algoxange smart contract using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AlgoxangeArgs['obj']['create_application(asset,uint64)void'] | AlgoxangeArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AlgoxangeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Algoxange smart contract using an ABI method call using the create_application(asset,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AlgoxangeArgs['obj']['create_application(asset,uint64)void'] | AlgoxangeArgs['tuple']['create_application(asset,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AlgoxangeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AlgoxangeReturns['create_application(asset,uint64)void']) }, appClient: new AlgoxangeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Algoxange smart contract
 */
export class AlgoxangeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AlgoxangeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Algoxange app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AlgoxangeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgoxangeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AlgoxangeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AlgoxangeClient> {
    return new AlgoxangeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AlgoxangeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AlgoxangeClient> {
    return new AlgoxangeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Algoxange smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.params.delete(AlgoxangeParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Algoxange smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Algoxange smart contract using the `create_nft(string,string,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNft: (params: CallParams<AlgoxangeArgs['obj']['create_nft(string,string,string)uint64'] | AlgoxangeArgs['tuple']['create_nft(string,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoxangeParamsFactory.createNft(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `update_asset_id(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAssetId: (params: CallParams<AlgoxangeArgs['obj']['update_asset_id(asset)void'] | AlgoxangeArgs['tuple']['update_asset_id(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoxangeParamsFactory.updateAssetId(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    setPrice: (params: CallParams<AlgoxangeArgs['obj']['set_price(uint64)void'] | AlgoxangeArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoxangeParamsFactory.setPrice(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<AlgoxangeArgs['obj']['opt_in_to_asset(pay)void'] | AlgoxangeArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoxangeParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `debug_buy_check(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    debugBuyCheck: (params: CallParams<AlgoxangeArgs['obj']['debug_buy_check(pay)uint64'] | AlgoxangeArgs['tuple']['debug_buy_check(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoxangeParamsFactory.debugBuyCheck(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `buy(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buy: (params: CallParams<AlgoxangeArgs['obj']['buy(pay)void'] | AlgoxangeArgs['tuple']['buy(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AlgoxangeParamsFactory.buy(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Algoxange smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(AlgoxangeParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Algoxange smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Algoxange smart contract using the `create_nft(string,string,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNft: (params: CallParams<AlgoxangeArgs['obj']['create_nft(string,string,string)uint64'] | AlgoxangeArgs['tuple']['create_nft(string,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoxangeParamsFactory.createNft(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `update_asset_id(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAssetId: (params: CallParams<AlgoxangeArgs['obj']['update_asset_id(asset)void'] | AlgoxangeArgs['tuple']['update_asset_id(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoxangeParamsFactory.updateAssetId(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    setPrice: (params: CallParams<AlgoxangeArgs['obj']['set_price(uint64)void'] | AlgoxangeArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoxangeParamsFactory.setPrice(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<AlgoxangeArgs['obj']['opt_in_to_asset(pay)void'] | AlgoxangeArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoxangeParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `debug_buy_check(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    debugBuyCheck: (params: CallParams<AlgoxangeArgs['obj']['debug_buy_check(pay)uint64'] | AlgoxangeArgs['tuple']['debug_buy_check(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoxangeParamsFactory.debugBuyCheck(params))
    },

    /**
     * Makes a call to the Algoxange smart contract using the `buy(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buy: (params: CallParams<AlgoxangeArgs['obj']['buy(pay)void'] | AlgoxangeArgs['tuple']['buy(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AlgoxangeParamsFactory.buy(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Algoxange smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(AlgoxangeParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | AlgoxangeReturns['delete_application()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Algoxange smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Algoxange smart contract using the `create_nft(string,string,string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNft: async (params: CallParams<AlgoxangeArgs['obj']['create_nft(string,string,string)uint64'] | AlgoxangeArgs['tuple']['create_nft(string,string,string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoxangeParamsFactory.createNft(params))
      return {...result, return: result.return as unknown as (undefined | AlgoxangeReturns['create_nft(string,string,string)uint64'])}
    },

    /**
     * Makes a call to the Algoxange smart contract using the `update_asset_id(asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAssetId: async (params: CallParams<AlgoxangeArgs['obj']['update_asset_id(asset)void'] | AlgoxangeArgs['tuple']['update_asset_id(asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoxangeParamsFactory.updateAssetId(params))
      return {...result, return: result.return as unknown as (undefined | AlgoxangeReturns['update_asset_id(asset)void'])}
    },

    /**
     * Makes a call to the Algoxange smart contract using the `set_price(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    setPrice: async (params: CallParams<AlgoxangeArgs['obj']['set_price(uint64)void'] | AlgoxangeArgs['tuple']['set_price(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoxangeParamsFactory.setPrice(params))
      return {...result, return: result.return as unknown as (undefined | AlgoxangeReturns['set_price(uint64)void'])}
    },

    /**
     * Makes a call to the Algoxange smart contract using the `opt_in_to_asset(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<AlgoxangeArgs['obj']['opt_in_to_asset(pay)void'] | AlgoxangeArgs['tuple']['opt_in_to_asset(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoxangeParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | AlgoxangeReturns['opt_in_to_asset(pay)void'])}
    },

    /**
     * Makes a call to the Algoxange smart contract using the `debug_buy_check(pay)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    debugBuyCheck: async (params: CallParams<AlgoxangeArgs['obj']['debug_buy_check(pay)uint64'] | AlgoxangeArgs['tuple']['debug_buy_check(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoxangeParamsFactory.debugBuyCheck(params))
      return {...result, return: result.return as unknown as (undefined | AlgoxangeReturns['debug_buy_check(pay)uint64'])}
    },

    /**
     * Makes a call to the Algoxange smart contract using the `buy(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buy: async (params: CallParams<AlgoxangeArgs['obj']['buy(pay)void'] | AlgoxangeArgs['tuple']['buy(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AlgoxangeParamsFactory.buy(params))
      return {...result, return: result.return as unknown as (undefined | AlgoxangeReturns['buy(pay)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AlgoxangeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Algoxange app
   */
  state = {
    /**
     * Methods to access global state for the current Algoxange app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetid: result.assetid,
          unitaryprice: result.unitaryprice,
        }
      },
      /**
       * Get the current value of the assetid key in global state
       */
      assetid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetid")) as bigint | undefined },
      /**
       * Get the current value of the unitaryprice key in global state
       */
      unitaryprice: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("unitaryprice")) as bigint | undefined },
    },
  }

  public newGroup(): AlgoxangeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_nft(string,string,string)uint64 method call against the Algoxange contract
       */
      createNft(params: CallParams<AlgoxangeArgs['obj']['create_nft(string,string,string)uint64'] | AlgoxangeArgs['tuple']['create_nft(string,string,string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNft(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_nft(string,string,string)uint64', v))
        return this
      },
      /**
       * Add a update_asset_id(asset)void method call against the Algoxange contract
       */
      updateAssetId(params: CallParams<AlgoxangeArgs['obj']['update_asset_id(asset)void'] | AlgoxangeArgs['tuple']['update_asset_id(asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAssetId(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a set_price(uint64)void method call against the Algoxange contract
       */
      setPrice(params: CallParams<AlgoxangeArgs['obj']['set_price(uint64)void'] | AlgoxangeArgs['tuple']['set_price(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.setPrice(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a opt_in_to_asset(pay)void method call against the Algoxange contract
       */
      optInToAsset(params: CallParams<AlgoxangeArgs['obj']['opt_in_to_asset(pay)void'] | AlgoxangeArgs['tuple']['opt_in_to_asset(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a debug_buy_check(pay)uint64 method call against the Algoxange contract
       */
      debugBuyCheck(params: CallParams<AlgoxangeArgs['obj']['debug_buy_check(pay)uint64'] | AlgoxangeArgs['tuple']['debug_buy_check(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.debugBuyCheck(params)))
        resultMappers.push((v) => client.decodeReturnValue('debug_buy_check(pay)uint64', v))
        return this
      },
      /**
       * Add a buy(pay)void method call against the Algoxange contract
       */
      buy(params: CallParams<AlgoxangeArgs['obj']['buy(pay)void'] | AlgoxangeArgs['tuple']['buy(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buy(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Algoxange contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgoxangeComposer
  }
}
export type AlgoxangeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_nft(string,string,string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNft(params?: CallParams<AlgoxangeArgs['obj']['create_nft(string,string,string)uint64'] | AlgoxangeArgs['tuple']['create_nft(string,string,string)uint64']>): AlgoxangeComposer<[...TReturns, AlgoxangeReturns['create_nft(string,string,string)uint64'] | undefined]>

  /**
   * Calls the update_asset_id(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAssetId(params?: CallParams<AlgoxangeArgs['obj']['update_asset_id(asset)void'] | AlgoxangeArgs['tuple']['update_asset_id(asset)void']>): AlgoxangeComposer<[...TReturns, AlgoxangeReturns['update_asset_id(asset)void'] | undefined]>

  /**
   * Calls the set_price(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPrice(params?: CallParams<AlgoxangeArgs['obj']['set_price(uint64)void'] | AlgoxangeArgs['tuple']['set_price(uint64)void']>): AlgoxangeComposer<[...TReturns, AlgoxangeReturns['set_price(uint64)void'] | undefined]>

  /**
   * Calls the opt_in_to_asset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<AlgoxangeArgs['obj']['opt_in_to_asset(pay)void'] | AlgoxangeArgs['tuple']['opt_in_to_asset(pay)void']>): AlgoxangeComposer<[...TReturns, AlgoxangeReturns['opt_in_to_asset(pay)void'] | undefined]>

  /**
   * Calls the debug_buy_check(pay)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  debugBuyCheck(params?: CallParams<AlgoxangeArgs['obj']['debug_buy_check(pay)uint64'] | AlgoxangeArgs['tuple']['debug_buy_check(pay)uint64']>): AlgoxangeComposer<[...TReturns, AlgoxangeReturns['debug_buy_check(pay)uint64'] | undefined]>

  /**
   * Calls the buy(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buy(params?: CallParams<AlgoxangeArgs['obj']['buy(pay)void'] | AlgoxangeArgs['tuple']['buy(pay)void']>): AlgoxangeComposer<[...TReturns, AlgoxangeReturns['buy(pay)void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Algoxange smart contract using the delete_application()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<AlgoxangeArgs['obj']['delete_application()void'] | AlgoxangeArgs['tuple']['delete_application()void']>): AlgoxangeComposer<[...TReturns, AlgoxangeReturns['delete_application()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Algoxange smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgoxangeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgoxangeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AlgoxangeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AlgoxangeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AlgoxangeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AlgoxangeComposerResults<TReturns>>
}
export type AlgoxangeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

